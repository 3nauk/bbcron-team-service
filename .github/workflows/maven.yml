name: Build

on:
  push:
    branches:
      - develop
      - feature/*
      - fix*

jobs:
  build-with-jdk-11:
    name: üî• build
    runs-on: self-hosted
    env:
      PRODUCT_NAME: bbcron-project-service
      DOCKER_ORGANIZATION: docker.io/3nauk
    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Build with Maven
        env:
          GITHUB_USER: ${{secrets.bnauk_user}}
          GITHUB_TOKEN: ${{secrets.bnauk_token}}
        run: mvn clean verify spotbugs:spotbugs

      - uses: jwgmeligmeyling/spotbugs-github-action@master
        with:
          path: '**/spotbugsXml.xml'

      - name: Generate Jacoco Badge
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v1.0.0
      - name: Log coverage percentage
        run: |
          echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
      - name: Upload Jacoco coverage report
        uses: actions/upload-artifact@v2
        with:
          name: jacoco-report
          path: target/site/jacoco/
      - name: Cache artifact Build
        uses: actions/cache@v2
        id: restore-build
        with:
          path: ./*
          key: build-${{ github.sha }}

  docker_build:
    name: üî• docker image
    needs: build-with-jdk-11
    runs-on: self-hosted
    env:
      PRODUCT_NAME: bbcron-user-service
      DOCKER_ORGANIZATION: docker.io/3nauk
    steps:
      - name: Restore build
        uses: actions/cache@v2
        id: restore-build
        with:
          path: ./*
          key: build-${{ github.sha }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and export
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: ${{env.DOCKER_ORGANIZATION}}/${{env.PRODUCT_NAME}}:${{ github.sha }}
          outputs: type=docker,dest=/tmp/${{env.PRODUCT_NAME}}.tar
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.PRODUCT_NAME}}
          path: /tmp/${{env.PRODUCT_NAME}}.tar
  #      - name: Build an image from Dockerfile
  #        run: |
  #          docker build -f Dockerfile -t ${{env.DOCKER_ORGANIZATION}}/${{env.PRODUCT_NAME}}:${{ github.sha }} .


  docker_trivy:
    name: üîç analyze Image
    needs: docker_build
    runs-on: self-hosted
    env:
      PRODUCT_NAME: bbcron-user-service
      DOCKER_ORGANIZATION: docker.io/3nauk
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{env.PRODUCT_NAME}}
          path: /tmp
      - name: Load image
        run: |
          docker load --input /tmp/${{env.PRODUCT_NAME}}.tar
          docker image ls -a
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{env.DOCKER_ORGANIZATION}}/${{env.PRODUCT_NAME}}:${{ github.sha }}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
      - name: Upload Resuls Trivy
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.PRODUCT_NAME}}.sarif
          path: trivy-results.sarif
  docker_push:
    name: üìå Push Image
    needs: docker_trivy
    runs-on: self-hosted
    env:
      PRODUCT_NAME: bbcron-user-service
      DOCKER_ORGANIZATION: docker.io/3nauk
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{env.PRODUCT_NAME}}
          path: /tmp
      - name: Load image
        run: |
          docker load --input /tmp/${{env.PRODUCT_NAME}}.tar
          docker image ls -a
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push
        run: |
          docker push ${{env.DOCKER_ORGANIZATION}}/${{env.PRODUCT_NAME}}:${{ github.sha }}